import telebot
import sqlite3
from datetime import datetime
import logging
import math

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

ALLOWED_USERS = [101010101]   # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–º—É –º–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ --------------------
bot = telebot.TeleBot('8352449890:AAHKY9rblZSYQv1GRfqj7Nn2lYIftv_gHc0')

# -------------------- –†–∞–±–æ—Ç–∞ —Å –ë–î --------------------
def init_db():
    conn = sqlite3.connect('chat_messagesq.db')
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–ª–æ–Ω–∫–æ–π deleted
    c.execute('''CREATE TABLE IF NOT EXISTS messages (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT,
                 message_link TEXT,
                 is_newbie INTEGER,
                 timestamp TEXT,
                 del_id 
                 )''')
    # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS user_data (
                    user_id INTEGER,
                    message_id INTEGER,
                    FOREIGN KEY(message_id) REFERENCES messages(id)
                 )''')
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def mark_deleted(message_id: int) -> bool:
    """–ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–µ"""
    try:
        conn = sqlite3.connect('chat_messagesq.db')
        c = conn.cursor()
        c.execute('UPDATE messages SET is_newbie = 1 WHERE id = ?', (message_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ deleted –¥–ª—è {message_id}: {e}")
        return False


def clear_all_data() -> bool:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –ë–î"""
    try:
        conn = sqlite3.connect('chat_messagesq.db')
        c = conn.cursor()
        c.execute('DELETE FROM messages')
        c.execute('DELETE FROM user_data')
        conn.commit()
        conn.close()
        logging.info("–ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î: {e}")
        return False


def split_text(text, limit=4000):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    parts = []
    lines = text.split('\n')
    buffer = ''
    for line in lines:
        if len(buffer) + len(line) + 1 > limit:
            parts.append(buffer)
            buffer = line + '\n'
        else:
            buffer += line + '\n'
    if buffer:
        parts.append(buffer)
    return parts


# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É:*

1Ô∏è‚É£ /start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
2Ô∏è‚É£ /lk <–≤–∞—à_id> ‚Äî –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è  
3Ô∏è‚É£ /rm <id> ‚Äî –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–µ  
4Ô∏è‚É£ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é  
5Ô∏è‚É£ /lk_admin ‚Äî –ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ë–î  
6Ô∏è‚É£ /rm_admin ‚Äî –ê–¥–º–∏–Ω: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ë–î
"""
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lk <–≤–∞—à_id>. "
                     "–î–ª—è –ø–æ–º–æ—â–∏ ‚Äî /help")


@bot.message_handler(commands=['lk'])
def lk_command(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /lk <—Ç–≤–æ–π_id>")
        return
    try:
        user_id = int(parts[1])
        if user_id not in ALLOWED_USERS:
            bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        conn = sqlite3.connect('chat_messagesq.db')
        c = conn.cursor()
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        c.execute('''SELECT m.id, m.username, m.message_link, m.timestamp
                     FROM messages m
                     JOIN user_data u ON m.id = u.message_id
                     WHERE u.user_id = ? AND m.deleted = 0''', (user_id,))
        rows = c.fetchall()
        conn.close()

        if rows:
            formatted = []
            for r in rows:
                formatted.append(
                    f"üÜî ID: {r[0]}\n"
                    f"üë§ –Æ–∑–µ—Ä: {r[1]}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {r[2]}\n"
                    f"üïí –î–∞—Ç–∞: {r[3]}\n"
                    + "-"*30
                )
            full_text = "\n".join(formatted)
            for part in split_text(full_text):
                bot.send_message(message.chat.id, part)
        else:
            bot.send_message(message.chat.id, "‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùó –ê–π–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


@bot.message_handler(commands=['rm'])
def rm_command(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /rm <id_—Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    try:
        message_id = int(parts[1])
        success = mark_deleted(message_id)
        if success:
            bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–µ.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


# -------------------- –ê–¥–º–∏–Ω—Å–∫–∏–µ --------------------
@bot.message_handler(commands=['lk_admin'])
def lkadminq_command(message):
    conn = sqlite3.connect('chat_messagesq.db')
    c = conn.cursor()
    c.execute('SELECT * FROM messages ORDER BY id DESC')
    rows = c.fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "‚ùó –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
        return

    formatted = []
    for r in rows:
        formatted.append(
            f"üÜî ID: {r[0]}\n"
            f"üë§ –Æ–∑–µ—Ä: {r[1]}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {r[2]}\n"
            f"üìå –ù–æ–≤–∏—á–æ–∫: {'–î–∞' if r[3] else '–ù–µ—Ç'}\n"
            f"üïí –î–∞—Ç–∞: {r[4]}\n"
            + "-"*30
        )
    full_text = "\n".join(formatted)
    for part in split_text(full_text):
        bot.send_message(message.chat.id, part)


@bot.message_handler(commands=['rm_admin'])
def rmadmin_command(message):
    if message.from_user.id not in ADMINS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    success = clear_all_data()
    if success:
        bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã.")


# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–º–±)
@bot.message_handler(commands=['rmb'])
def handle_bulk_remove(message):
    try:
        # –∫–æ–º–∞–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /rmb 100 200
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /rmb 100 200")
            return

        start_id = int(parts[1])
        end_id = int(parts[2])

        conn = sqlite3.connect("chat_messagesq.db")
        cursor = conn.cursor()

        cursor.execute(
            "UPDATE messages SET is_newbie = 0 WHERE id BETWEEN ? AND ?",
            (start_id, end_id)
        )

        conn.commit()
        conn.close()

        bot.reply_to(
            message,
            f"–°–æ–æ–±—â–µ–Ω–∏—è —Å ID {start_id} –ø–æ {end_id} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–µ"
        )

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
if __name__ == '__main__':
    init_db()
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
